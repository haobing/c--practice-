#include "thr.h"
class Thread
{
    public:
        typedef void (*routine)(void *param);
        Thread(const char *name,bool auto_del =false);
        virtual ~Thread();
        static void *thread_proc(void *param);

        void begin();
        void Delay(int mseconds);
        void WakeUp();
        void tryterminate();
        protected:
            virtual void run() = 0;
        pthread_t _thread;
        bool      _running;
    bool      _auto_del;
    char      _name[128];

    pthread_mutex_t m_mutex;
    pthread_cond_t m_cond;
};

class Utimer:public Thread
{
    public:
        Utimer(int mseconds = 1000);
        ~Utimer();
    protected:
        virtual void run();
        virtual void onTimer() = 0;
    private:
        int m_mseconds;
};



#include"thread.h"

Thread::Thread(const char *name,bool auto_del):_running(false),_auto_del(auto_del)
{
    _thread = 0;
    pthread_mutex_init(&m_mutex,NULL);
    pthread_cond_init(&m_cond,NULL);
}

Thread::~Thread()
{
    _running = false;
    pthread_mutex_destroy(&m_mutex);
    pthread_mutex_destroy(&m_cond);
}

void Thread::Delay(int mseconds)
{
    struct timeval tp;
    gettimeofday(&tp,NULL);
    
    struct timespec timeout;
    timeout.tv_sec = tp.tv_sec;
    timeout.tv_nsec = tp.tv_usec*1000L;

    timeout.tv_nsec += (long long )mseconds*1000000L;
    
    timeout.tv_sec += timeout.tv_nsec/1000000000L;
    timeout.tv_nsec = timeout.tv_nsec%1000000000L;

    pthread_mutex_lock(&m_mutex);
    pthread_cond_timedwait(&m_cond,&m_mutex,&timeout);
    pthread_mutex_unlock(&m_mutex);

}

void Thread::WakeUp()
{
    pthread_mutex_lock(&m_mutex);
    pthread_cond_signal(&m_cond);
    pthread_mutex_unlock(&m_mutex);
}

void *Thread::thread_proc(void *param)
{
    if(param != NULL)
    {
        Thread *thd = (Thread*)param;
        thd->_running =  true;

        thd->run();
    }
}

void Thread::begin()
{
    if(!_running)
    {
        pthread_create(&_thread,NULL,Thread::thread_proc,this);
        while(!_running)
        {
            usleep(1000);
        }
    }
}

void Thread::tryterminate()
{
    _running = false;
}

Utimer::Utimer(int mseconds):Thread("Utimer"),m_mseconds(mseconds)
{

}

Utimer::~Utimer()
{

}

void Utimer::run()
{
    while(_running)
    {
        Delay(m_mseconds);
        if(_running)
        {
            onTimer();
        }
    }
}
