重载运算符函数的参数数量与该运算符作用的运算对象数量一样多。一元运算符有一个参数，
二元运算符有两个。对于二元运算符来说，左侧运算对象传递给第一个参数，右侧运算对象传递给第二个参数。

如果一个运算符函数是成员函数，则它的第一个（左侧）运算对象绑定到隐式的this指针上，
因此，成员运算符函数的参数数量比运算符的运算对象总数少一个。
#include<iostream>
using namespace std;
template<class numtype>
class complex
{
public:
complex(){real = image = 0;}
complex(numtype r, numtype i)
{
real = r;
image = i;
}

complex operator+(const complex &c);
complex operator-(const complex &c);
void print()
{
	cout<<real<<" "<<image<<endl;
}
private:
	numtype real;
	numtype image;
};
template<class numtype>
 complex<numtype> complex<numtype>::operator+(const complex &x)
	{
		real = image + x.real;
		image = real + x.image;
		return *this;
}
template<class numtype>
complex<numtype> complex<numtype>::operator-(const complex &y)
{
	real = real - y.real;
	image = image - y.image;
	return *this;
}
int main()
{
	complex<double> a(1.1,2.2);
	complex<double> b(1.0,2.0);
	a=a-b;
	a.print();
}
