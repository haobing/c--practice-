#include<iostream>
#include<list>
#include<map>
#include<vector>
using namespace std;
class War;
class State
{
public:
	virtual void Prophase() {}
	virtual void Metaphase() {}
	virtual void Anaphase() {}
	virtual void End() {}
	virtual void CurrentState(War *war){}
};

class War
{
private:
	State* m_state;
	int m_day;
public:
	War(State *state):m_state(state),m_day(0){}
	~War() { delete m_state; }
	int getDays() { return m_day; }
	void setDays(int days) { m_day = days; }
	void setState(State* state) { delete m_state; m_state = state; }
	void getState() { m_state->CurrentState(this); }
};

class EndState :public State
{
public:
	void End(War* war)
	{
		cout << "战争结束" << endl;
	}
	void CurrentState(War* war) {
		End(war);
	}
};

class AnaphaseState :public State
{
public:
	void Anaphase(War* war)
	{
		if (war->getDays() < 30)
		{
			cout << "第" << war->getDays() << "天：战争后期，双方拼死一博" << endl;
		}
		else
		{
			war->setState(new EndState());
			war->getState();
		}
	}
	void CurrentState(War* war)
	{
		Anaphase(war);
	}
};

class ProphaseState :public State
{
public:
	void Prophase(War* war)
	{
		if (war->getDays() < 10)
		{
			cout << "第" << war->getDays() << "天：战争初期，双方你来我往，互相试探对方" << endl;
		}
		else
		{
			war->setState(new AnaphaseState());
		}
	}
	void CurrentState(War* war) { Prophase(war); }
};

int main()
{
	War* war = new War(new ProphaseState());
	for (int i = 1; i < 40; i += 5)
	{
		war->setDays(i);
		war->getState();
	}

	delete war;
	return 0;
}
