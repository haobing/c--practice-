#include<iostream>
#include<list>
#include<map>
#include<vector>
using namespace std;
class Secretary;
class StockObserver
{
public:
	StockObserver(string name, Secretary* sub)
	{
		this->name = name;
		this->ssub = sub;
	}
	void update();
private:
	string name;
	Secretary* ssub;
};


class Secretary
{
public:
	
	string action;
	void add(StockObserver ob)
	{
		observers.push_back(ob);
	}
	void remove(int addIndex)
	{
		if (addIndex >= 0 && addIndex < observers.size())
		{
			observers.erase(observers.begin() + addIndex);
		}
	}

	void notify()
	{
		vector<StockObserver>::iterator it;
		for (it = observers.begin(); it != observers.end(); it++)
		{
			it->update();
		}
	}
private:
	vector<StockObserver> observers;
};

void StockObserver::update()
{
	cout << name << ":" << ssub->action << ",begin to work" << endl;
}

int main()
{
	Secretary* p = new Secretary();
	StockObserver* s1 = new StockObserver("hao",p);
	StockObserver* s2 = new StockObserver("li",p);
	p->add(*s1);
	p->add(*s2);
	p->action = "the boss is coming";
	p->notify();
	p->remove(0);
	p->notify();
	delete p;
	delete s1;
	delete s2;

}


   
