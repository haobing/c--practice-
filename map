Map是STL的一个关联容器，它提供一对一（其中第一个可以称为关键字，每个关键字只能在map中出现一次，
第二个可能称为该关键字的值）的数据 处理能力，由于这个特性，它完成有可能在我们处理一对一数据的时候，
在编程上提供快速通道。这里说下map内部数据的组织，map内部自建一颗红黑树(一 种非严格意义上的平衡二叉树)，
这颗树具有对数据自动排序的功能，所以在map内部所有的数据都是有序的，后边我们会见识到有序的好处。
map的基本操作函数：
      C++ Maps是一种关联式容器，包含“关键字/值”对
      begin()          返回指向map头部的迭代器
      clear(）         删除所有元素
      count()          返回指定元素出现的次数
      empty()          如果map为空则返回true
      end()            返回指向map末尾的迭代器
      equal_range()    返回特殊条目的迭代器对
      erase()          删除一个元素
      find()           查找一个元素
      get_allocator()  返回map的配置器
      insert()         插入元素
      key_comp()       返回比较元素key的函数
      lower_bound()    返回键值>=给定元素的第一个位置
      max_size()       返回可以容纳的最大元素个数
      rbegin()         返回一个指向map尾部的逆向迭代器
      rend()           返回一个指向map头部的逆向迭代器
      size()           返回map中元素的个数
      swap()            交换两个map
      upper_bound()     返回键值>给定元素的第一个位置
      value_comp()      返回比较元素value的函数
#include<map>
#include<string>
#include<iostream>
using namespace std;


int main()
{
	map<int, string> mapstudent;
	
	mapstudent.insert(pair<int,string>(1,"student_one"));
	
	mapstudent.insert(map<int,string>::value_type(2,"student_two"));
	mapstudent[3]="student_three";
	mapstudent.insert(map<int,string>::value_type(4,"student_four"));
	
	pair<map<int,string>::iterator,bool> insertpair;
	
	insertpair = mapstudent.insert(map<int,string>::value_type(5,"student_five"));
	
	if(insertpair.second == true)
	{
		cout<<"successful"<<endl;
	}
	
	map<int,string>::iterator iter;
	for(iter = mapstudent.begin(); iter != mapstudent.end();iter++)
	{
		cout<<iter->first<<" "<<iter->second<<endl;
	}
	
	for(int index=0;index<mapstudent.size();index++)
	{
		cout<<mapstudent[index]<<endl;
	}
	
	cout<<mapstudent.count(1)<<endl;//返回指定元素出现的次数
	
	iter = mapstudent.find(1);//查找一个元素
	
	if(iter!=mapstudent.end())
	{
		cout<<"shuju cunzai"<<iter->first<<" "<<iter->second<<endl;
	}
	
	int n=mapstudent.erase(3);
	
	iter = mapstudent.lower_bound(4);   // 返回键值>=给定元素的第一个位置 
    cout<<iter->second<<endl;  
    iter = mapstudent.upper_bound(4);   //返回键值>给定元素的第一个位置   
    cout<<iter->second<<endl;      
    
    mapstudent.erase(mapstudent.begin(),mapstudent.end());
	}


map的键为结构体--------------------------------------------------------------------------------------
必须要重载小于号<

#include<map>
#include<string>
#include<iostream>

#include <cstring>
using namespace std;


typedef struct ip_tuple
{
	int src_port;
	int dst_port;
	char *src_ip;
	bool operator<(const ip_tuple& other) const
	{
		if(src_port < other.src_port)
			{
				return true;
			}
			else if(src_port==other.src_port)
			{
				if(dst_port<other.dst_port)
				{
					return true;
				}
				else if(dst_port==other.dst_port)
				{
					if(strcmp(src_ip,other.src_ip)!=0)
					{
						return true;
					}
				}
			}
		return false;
	}
}IPTUPLE;

int main()
{
	map<IPTUPLE,int>m_roadmap;
	for(int i=0;i<6;i++)
	{
		IPTUPLE it;
		it.src_port=i;
		it.dst_port=i*10;
		it.src_ip = new char(20);
		if(i==1)
        it.src_ip="aaa";
        if(i==2)
        it.src_ip="bbb";
        if(i==3)
        it.src_ip="ccc";
        if(i==4)
        it.src_ip="ddd";
        if(i==5)
        it.src_ip="bbb";
       

		m_roadmap.insert(make_pair(it,i*100));
	}
	
	IPTUPLE ite;
	ite.src_port=2;
	ite.dst_port=20;
	ite.src_ip="bbb";
	
	map<IPTUPLE,int>::iterator itor;
		itor=m_roadmap.find(ite);
		for(itor;itor!=m_roadmap.end();itor++)
		{
			cout<<itor->first.src_port<<endl;
		}
	}
