STL中的排序都是默认使用小于号来排序。因此，在对结构体排序时，我们就需要重载小于号！比如：set容器在执行insert操作时，必须重载操作符<。
另外，unique函数功能是去除相邻的重复元素，而在执行unique操作时必须重载操作符==。

一、List定义：

List是stl实现的双向链表，与向量(vectors)相比, 它允许快速的插入和删除，但是随机访问却比较慢。使用时需要添加头文件

#include <list>

二、List定义和初始化：

    list<int>lst1;          //创建空list

    list<int> lst2(5);       //创建含有5个元素的list

    list<int>lst3(3,2);  //创建含有3个元素的list

    list<int>lst4(lst2);    //使用lst2初始化lst4

    list<int>lst5(lst2.begin(),lst2.end());  //同lst4

三、List常用操作函数：

Lst1.assign() 给list赋值 
Lst1.back() 返回最后一个元素 
Lst1.begin() 返回指向第一个元素的迭代器 
Lst1.clear() 删除所有元素 
Lst1.empty() 如果list是空的则返回true 
Lst1.end() 返回末尾的迭代器 
Lst1.erase() 删除一个元素 
Lst1.front() 返回第一个元素 
Lst1.get_allocator() 返回list的配置器 
Lst1.insert() 插入一个元素到list中 
Lst1.max_size() 返回list能容纳的最大元素数量 
Lst1.merge() 合并两个list 
Lst1.pop_back() 删除最后一个元素 
Lst1.pop_front() 删除第一个元素 
Lst1.push_back() 在list的末尾添加一个元素 
Lst1.push_front() 在list的头部添加一个元素 
Lst1.rbegin() 返回指向第一个元素的逆向迭代器 
Lst1.remove() 从list删除元素 
Lst1.remove_if() 按指定条件删除元素 
Lst1.rend() 指向list末尾的逆向迭代器 
Lst1.resize() 改变list的大小 
Lst1.reverse() 把list的元素倒转 
Lst1.size() 返回list中的元素个数 
Lst1.sort() 给list排序 
Lst1.splice() 合并两个list 
Lst1.swap() 交换两个list 
Lst1.unique() 删除list中重复的元素

#include<list>
#include<set>
#include<iostream>
using namespace std;

struct cont
{
	int age;
	int sextype;
	char name[20];
	
	bool operator<(const cont& man) const
	{
		if(age<man.age)
		{
			return true;
		}else if(age==man.age)
		{
			if(sextype<man.sextype)
			{
				return true;
			}
		}
		return false;
	}
	
	bool operator==(const cont& man) const
	{
		return sextype==man.sextype;
	}
};

bool sigle_digit(const cont &c)
{
	return c.age<10;
}
bool same_unique(const cont &ma1,const cont &ma2)
{
	return (ma1.age==ma2.age);
}

int main()
{
	cont con1 = {4,1,"liming"};
	cont con2 = {3,2,"lihong"};
	cont con3 = {3,3,"fd"};
	cont con4 = {11,4,"fds"};
	
	list<cont> content,content1;
	
	content.push_back(con1);
	content.push_back(con2);
	content.push_back(con3);
	content.push_back(con3);
	content.push_back(con3);
	content.push_back(con3);
	content.insert(content.begin(),con4);
	
	if(content.empty() == false)
	{
		cout<<content.size()<<" "<<content.back().age<<" "<<content.begin()->age<<endl;
  }
  
	list<cont>::iterator it=content.begin();
		
	for(;it!=content.end();it++)
	{
		cout<<"age "<<it->age<<" sextype "<<it->sextype<<endl;
	}
	content1.assign(content.begin(),content.end());
	
	content1.sort();//Lst1.sort() 给list排序 ，***注意需要重载小于<号
	
	content1.erase(content1.begin());//Lst1.erase() 删除一个元素
	
	content1.remove(con2);//Lst1.remove() 从list删除元素
	
	//content1.remove_if(sigle_digit);//Lst1.remove_if()按指定条件删除元素 
	
	content1.reverse();//Lst1.reverse() 把list的元素倒转 
	
	//content1.unique();//Lst1.unique() 删除list中重复的元素,***注意需要重载==号
	
	//content.unique(same_unique);
	
	for(it=content1.begin();it!=content1.end();it++)
	{
		cout<<"age1 "<<it->age<<" sextype "<<it->sextype<<endl;
	}
}
	
		

		
	
		

		
